"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class features_t(object):
    __slots__ = ["timestampJetson", "timestampCamera", "featuresNrFound", "featureId", "pixelLocation", "plVariances", "versorDirection", "vdVariances"]

    def __init__(self):
        self.timestampJetson = 0
        self.timestampCamera = 0
        self.featuresNrFound = 0
        self.featureId = [ 0 for dim0 in range(40) ]
        self.pixelLocation = [ [ 0.0 for dim1 in range(2) ] for dim0 in range(40) ]
        self.plVariances = [ [ 0.0 for dim1 in range(4) ] for dim0 in range(40) ]
        self.versorDirection = [ [ 0.0 for dim1 in range(3) ] for dim0 in range(40) ]
        self.vdVariances = [ [ 0.0 for dim1 in range(9) ] for dim0 in range(40) ]

    def encode(self):
        buf = BytesIO()
        buf.write(features_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qqh", self.timestampJetson, self.timestampCamera, self.featuresNrFound))
        buf.write(struct.pack('>40h', *self.featureId[:40]))
        for i0 in range(40):
            buf.write(struct.pack('>2d', *self.pixelLocation[i0][:2]))
        for i0 in range(40):
            buf.write(struct.pack('>4d', *self.plVariances[i0][:4]))
        for i0 in range(40):
            buf.write(struct.pack('>3d', *self.versorDirection[i0][:3]))
        for i0 in range(40):
            buf.write(struct.pack('>9d', *self.vdVariances[i0][:9]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != features_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return features_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = features_t()
        self.timestampJetson, self.timestampCamera, self.featuresNrFound = struct.unpack(">qqh", buf.read(18))
        self.featureId = struct.unpack('>40h', buf.read(80))
        self.pixelLocation = []
        for i0 in range(40):
            self.pixelLocation.append(struct.unpack('>2d', buf.read(16)))
        self.plVariances = []
        for i0 in range(40):
            self.plVariances.append(struct.unpack('>4d', buf.read(32)))
        self.versorDirection = []
        for i0 in range(40):
            self.versorDirection.append(struct.unpack('>3d', buf.read(24)))
        self.vdVariances = []
        for i0 in range(40):
            self.vdVariances.append(struct.unpack('>9d', buf.read(72)))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if features_t in parents: return 0
        tmphash = (0xe10cf85ccb7a5858) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if features_t._packed_fingerprint is None:
            features_t._packed_fingerprint = struct.pack(">Q", features_t._get_hash_recursive([]))
        return features_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

