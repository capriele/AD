/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package agile;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class features_t implements lcm.lcm.LCMEncodable
{
    public long timestampJetson;
    public long timestampCamera;
    public short featuresNrFound;
    public short featureId[];
    public double pixelLocation[][];
    public double plVariances[][];
    public double versorDirection[][];
    public double vdVariances[][];
 
    public features_t()
    {
        featureId = new short[40];
        pixelLocation = new double[40][2];
        plVariances = new double[40][4];
        versorDirection = new double[40][3];
        vdVariances = new double[40][9];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xe10cf85ccb7a5858L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(agile.features_t.class))
            return 0L;
 
        classes.add(agile.features_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.timestampJetson); 
 
        outs.writeLong(this.timestampCamera); 
 
        outs.writeShort(this.featuresNrFound); 
 
        for (int a = 0; a < 40; a++) {
            outs.writeShort(this.featureId[a]); 
        }
 
        for (int a = 0; a < 40; a++) {
            for (int b = 0; b < 2; b++) {
                outs.writeDouble(this.pixelLocation[a][b]); 
            }
        }
 
        for (int a = 0; a < 40; a++) {
            for (int b = 0; b < 4; b++) {
                outs.writeDouble(this.plVariances[a][b]); 
            }
        }
 
        for (int a = 0; a < 40; a++) {
            for (int b = 0; b < 3; b++) {
                outs.writeDouble(this.versorDirection[a][b]); 
            }
        }
 
        for (int a = 0; a < 40; a++) {
            for (int b = 0; b < 9; b++) {
                outs.writeDouble(this.vdVariances[a][b]); 
            }
        }
 
    }
 
    public features_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public features_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static agile.features_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        agile.features_t o = new agile.features_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.timestampJetson = ins.readLong();
 
        this.timestampCamera = ins.readLong();
 
        this.featuresNrFound = ins.readShort();
 
        this.featureId = new short[(int) 40];
        for (int a = 0; a < 40; a++) {
            this.featureId[a] = ins.readShort();
        }
 
        this.pixelLocation = new double[(int) 40][(int) 2];
        for (int a = 0; a < 40; a++) {
            for (int b = 0; b < 2; b++) {
                this.pixelLocation[a][b] = ins.readDouble();
            }
        }
 
        this.plVariances = new double[(int) 40][(int) 4];
        for (int a = 0; a < 40; a++) {
            for (int b = 0; b < 4; b++) {
                this.plVariances[a][b] = ins.readDouble();
            }
        }
 
        this.versorDirection = new double[(int) 40][(int) 3];
        for (int a = 0; a < 40; a++) {
            for (int b = 0; b < 3; b++) {
                this.versorDirection[a][b] = ins.readDouble();
            }
        }
 
        this.vdVariances = new double[(int) 40][(int) 9];
        for (int a = 0; a < 40; a++) {
            for (int b = 0; b < 9; b++) {
                this.vdVariances[a][b] = ins.readDouble();
            }
        }
 
    }
 
    public agile.features_t copy()
    {
        agile.features_t outobj = new agile.features_t();
        outobj.timestampJetson = this.timestampJetson;
 
        outobj.timestampCamera = this.timestampCamera;
 
        outobj.featuresNrFound = this.featuresNrFound;
 
        outobj.featureId = new short[(int) 40];
        System.arraycopy(this.featureId, 0, outobj.featureId, 0, 40); 
        outobj.pixelLocation = new double[(int) 40][(int) 2];
        for (int a = 0; a < 40; a++) {
            System.arraycopy(this.pixelLocation[a], 0, outobj.pixelLocation[a], 0, 2);        }
 
        outobj.plVariances = new double[(int) 40][(int) 4];
        for (int a = 0; a < 40; a++) {
            System.arraycopy(this.plVariances[a], 0, outobj.plVariances[a], 0, 4);        }
 
        outobj.versorDirection = new double[(int) 40][(int) 3];
        for (int a = 0; a < 40; a++) {
            System.arraycopy(this.versorDirection[a], 0, outobj.versorDirection[a], 0, 3);        }
 
        outobj.vdVariances = new double[(int) 40][(int) 9];
        for (int a = 0; a < 40; a++) {
            System.arraycopy(this.vdVariances[a], 0, outobj.vdVariances[a], 0, 9);        }
 
        return outobj;
    }
 
}

