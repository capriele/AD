/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package agile;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class imuRaw_t implements lcm.lcm.LCMEncodable
{
    public long timestampArduino;
    public long timestampJetson;
    public double accel[];
    public double gyro[];
    public double magn[];
    public double baro;
 
    public imuRaw_t()
    {
        accel = new double[3];
        gyro = new double[3];
        magn = new double[3];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x9e57e09861b1c526L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(agile.imuRaw_t.class))
            return 0L;
 
        classes.add(agile.imuRaw_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.timestampArduino); 
 
        outs.writeLong(this.timestampJetson); 
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.accel[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.gyro[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.magn[a]); 
        }
 
        outs.writeDouble(this.baro); 
 
    }
 
    public imuRaw_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public imuRaw_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static agile.imuRaw_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        agile.imuRaw_t o = new agile.imuRaw_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.timestampArduino = ins.readLong();
 
        this.timestampJetson = ins.readLong();
 
        this.accel = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.accel[a] = ins.readDouble();
        }
 
        this.gyro = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.gyro[a] = ins.readDouble();
        }
 
        this.magn = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.magn[a] = ins.readDouble();
        }
 
        this.baro = ins.readDouble();
 
    }
 
    public agile.imuRaw_t copy()
    {
        agile.imuRaw_t outobj = new agile.imuRaw_t();
        outobj.timestampArduino = this.timestampArduino;
 
        outobj.timestampJetson = this.timestampJetson;
 
        outobj.accel = new double[(int) 3];
        System.arraycopy(this.accel, 0, outobj.accel, 0, 3); 
        outobj.gyro = new double[(int) 3];
        System.arraycopy(this.gyro, 0, outobj.gyro, 0, 3); 
        outobj.magn = new double[(int) 3];
        System.arraycopy(this.magn, 0, outobj.magn, 0, 3); 
        outobj.baro = this.baro;
 
        return outobj;
    }
 
}

