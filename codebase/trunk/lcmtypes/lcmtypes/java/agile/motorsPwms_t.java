/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package agile;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class motorsPwms_t implements lcm.lcm.LCMEncodable
{
    public long timestampJetson;
    public short pwms[];
 
    public motorsPwms_t()
    {
        pwms = new short[4];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x0c4d9d8ad874e3a9L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(agile.motorsPwms_t.class))
            return 0L;
 
        classes.add(agile.motorsPwms_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.timestampJetson); 
 
        for (int a = 0; a < 4; a++) {
            outs.writeShort(this.pwms[a]); 
        }
 
    }
 
    public motorsPwms_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public motorsPwms_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static agile.motorsPwms_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        agile.motorsPwms_t o = new agile.motorsPwms_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.timestampJetson = ins.readLong();
 
        this.pwms = new short[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.pwms[a] = ins.readShort();
        }
 
    }
 
    public agile.motorsPwms_t copy()
    {
        agile.motorsPwms_t outobj = new agile.motorsPwms_t();
        outobj.timestampJetson = this.timestampJetson;
 
        outobj.pwms = new short[(int) 4];
        System.arraycopy(this.pwms, 0, outobj.pwms, 0, 4); 
        return outobj;
    }
 
}

