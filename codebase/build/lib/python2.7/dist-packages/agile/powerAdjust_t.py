"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class powerAdjust_t(object):
    __slots__ = ["timestampJetson", "powerGain", "tBiasPDO", "yBiasPDO", "pBiasPDO", "rBiasPDO", "pyAdjustPDO", "dyAdjustPDO", "ppAdjustPDO", "dpAdjustPDO", "prAdjustPDO", "drAdjustPDO", "ptAdjustPDO", "dtAdjustPDO"]

    def __init__(self):
        self.timestampJetson = 0
        self.powerGain = 0.0
        self.tBiasPDO = 0.0
        self.yBiasPDO = 0.0
        self.pBiasPDO = 0.0
        self.rBiasPDO = 0.0
        self.pyAdjustPDO = 0.0
        self.dyAdjustPDO = 0.0
        self.ppAdjustPDO = 0.0
        self.dpAdjustPDO = 0.0
        self.prAdjustPDO = 0.0
        self.drAdjustPDO = 0.0
        self.ptAdjustPDO = 0.0
        self.dtAdjustPDO = 0.0

    def encode(self):
        buf = BytesIO()
        buf.write(powerAdjust_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qddddddddddddd", self.timestampJetson, self.powerGain, self.tBiasPDO, self.yBiasPDO, self.pBiasPDO, self.rBiasPDO, self.pyAdjustPDO, self.dyAdjustPDO, self.ppAdjustPDO, self.dpAdjustPDO, self.prAdjustPDO, self.drAdjustPDO, self.ptAdjustPDO, self.dtAdjustPDO))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != powerAdjust_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return powerAdjust_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = powerAdjust_t()
        self.timestampJetson, self.powerGain, self.tBiasPDO, self.yBiasPDO, self.pBiasPDO, self.rBiasPDO, self.pyAdjustPDO, self.dyAdjustPDO, self.ppAdjustPDO, self.dpAdjustPDO, self.prAdjustPDO, self.drAdjustPDO, self.ptAdjustPDO, self.dtAdjustPDO = struct.unpack(">qddddddddddddd", buf.read(112))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if powerAdjust_t in parents: return 0
        tmphash = (0x841bbf5ee272e80b) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if powerAdjust_t._packed_fingerprint is None:
            powerAdjust_t._packed_fingerprint = struct.pack(">Q", powerAdjust_t._get_hash_recursive([]))
        return powerAdjust_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

